%% circular convolution   
clc; clear all;  
  x = input("first sequence: ")
  h = input("second sequence: ")
  N = input("N value: ")
  x = [x zeros(1,(N-length(x)))]
   h = [h zeros(1,(N-length(h)))]
   y = zeros(1,N)
   for n= 0:N-1
      
       for m=0:N-1
           z = mod(m - n, N);
           y(n+1) = y(n+1) + x(m+1).*h(z+1);
           
       end
   end
y
%% tabular array 
 x = input("first sequence: ")
  h = input("second sequence: ")
  N = input("N value: ")
  x = [x zeros(1,(N-length(x)))]
  
   h = [h zeros(1,(N-length(h)))]
   y = zeros(1,N)
   for i = 1:N
       y(i)=[h(i:-1:1) h(N:-1:i+1)]*x';
   end
   y
%% graphical method 
x = input("first sequence: ")
  h = input("second sequence: ")
  N = input("N value: ")
  x = [x zeros(1,(N-length(x)))]
   h = [h zeros(1,(N-length(h)))]
   y = zeros(1,N)
for i=1:N-1;
y(i,:)=[h(i:-1:1) h(N:-1:i+1)]; % ith row,  if it is y(:,i) then its ith column. 
end
y=[y;h(N:-1:1)];
z=y*x'
%% DFT & IDFT
x = input("input time domain sequence: ")
 
  N = input("N value: ")
  
 x = [x zeros(1, (N-length(x)))]
 x
 y = zeros(1,N)
   for k = 0:N-1
       for n = 0:N-1
           y(k+1) = y(k+1) + x(n+1).*exp((-i*2*pi*k*n)/N);
       end
   end
   y
   h = zeros(1,N)
 for  n=0:N-1
     for k = 0:N-1
         h(n+1) = h(n+1) + y(k+1).*exp((i*2*pi*k*n)/N);
     end
     h(n+1) = (h(n+1))/N;
 end
 h
 %% DFT and IDFT using twiddle matrix method
 clc;clear;
 x = input('x(n): ')
 N = input('N value: ')
 x = [x zeros(N-(length(x)))]
 
 
 for n=0:N-1
     for k=0:N-1
          w((n+1),(k+1)) = exp((-i*2*pi*n*k)/N);
     end
 end
 y = w*x'
%% overlap save 
x = input("x(n) sequence: ")
h = input("h(n) sequence: ")
M = length(h)
N = input("N value: ")
h = [h zeros(1, (N - M))]
L = N-M+1
x1 = [zeros(1, (N-L))   x(1:L)]
for i = 1:L-1
     x2(i,:) = [x1(N) x(L+1: L+L)]
end
%% generation of signals 
t = 0:0.01:10
u = (t>=0) & (t<1);
x = sin((pi/2) *t).*u
plot(t , x)
u1 = (t>=1) & (t<2)
x1 = exp(-5*(t-1)).*u1
plot(t, f)
u2 = (t>=2) & (t<3)
x2 = -u2

plot(t, f )
u3 = (t>=3) & (t<=4)
x3 = (t-4).*u3;
f = x + x1 + x2 + x3;
plot(t ,f)
%% IIR BUTTER

Fs=1000;
kp=3;
ks=60;
fp=40;
fs=150;
wp=fp/(Fs/2);
ws=fs/(Fs/2);
[N wc]=buttord(wp,ws,kp,ks);
[b a]=butter(N,wc,'low');
freqz(b,a,1000,Fs);
